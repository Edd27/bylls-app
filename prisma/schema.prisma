// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String         @id @default(cuid())
  name          String?
  phone         String?        @unique
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role?          @relation(fields: [roleId], references: [id])
  roleId        String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  payments      Payment[]
  charges       Charge[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  status      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[]
}

model Module {
  id         String      @id @default(cuid())
  name       String      @unique
  code       String      @unique
  status     Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  operations Operation[]
}

model Operation {
  id          String       @id @default(cuid())
  name        String
  code        String
  module      Module       @relation(fields: [moduleId], references: [id])
  moduleId    String
  status      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
}

model Permission {
  status      Boolean   @default(true)
  role        Role      @relation(fields: [roleId], references: [id])
  roleId      String
  operation   Operation @relation(fields: [operationId], references: [id])
  operationId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([roleId, operationId])
}

model Service {
  id           String         @id @default(cuid())
  name         String         @unique
  price        Decimal        @db.Decimal(10, 2)
  cost         Decimal        @db.Decimal(10, 2)
  paymentDay   Int
  maxUsers     Int
  status       Boolean        @default(true)
  image        String?
  description  String?
  instructions String?
  username     String?
  password     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  profiles     Subscription[]
  payments     Payment[]
  charges      Charge[]
}

model Subscription {
  status    Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, serviceId])
}

model Payment {
  status    Boolean     @default(true)
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  service   Service     @relation(fields: [serviceId], references: [id])
  serviceId String
  amount    Decimal     @db.Decimal(10, 2)
  type      PaymentType @default(CASH)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@id([userId, serviceId])
}

model Charge {
  status    Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  cost      Decimal  @db.Decimal(10, 2)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, serviceId])
}

enum PaymentType {
  CASH
  DEPOSIT
  TRANSFER
}
